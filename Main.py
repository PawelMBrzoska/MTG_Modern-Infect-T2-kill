# Main of MTG Modern Infect T2 kill chance calculator
import random
import pandas as pd
import matplotlib.pyplot as plt
import os
import sys
import converter

#Setting directory
os.chdir(os.path.dirname(sys.argv[0]))

class Game:
    def __init__(self):
        self.elf = bool()
        self.dmg_1 = int
        self.dmg_2 = int
        self.dmg_2_free = int
        self.dmg_2_Groundswell = int
        self.dmg_3 = int
        self.dmg_4 = int
        self.scale_up = bool
        self.assault_strobe = bool
        self.doublestrike = bool
        self.t2_damage = int 
        self.hex = int
        self.g_mana = int
        self.u_mana = int
        self.r_mana = int
        self.total_mana = int

    def __str__(self):
        return f"""Game: Elf = {self.elf}, double strike = {self.doublestrike}, Total poison in T2 = {self.t2_damage}, 
                Total mana = {self.total_mana} including {self.g_mana} green mana and {self.r_mana} red mana"""


class Test:
    def __init__(self, deck=None):
        self.deck = deck
        self.win = int
        self.elfs = int
        self.games = int
        self.poison = []
        self.manascrew = int
        self.pumpscrew = int

    def __str__(self):
        ratio_win = (self.win/self.games)*100
        ratio_elf = (self.elfs/self.games)*100
        ratio_manascrew = (self.manascrew/self.games)*100
        ratio_pumpscrew = (self.pumpscrew/self.games)*100
        return f"""With this deck without mulligans you should win {self.win} out of {self.games} games. This is {ratio_win}%.
                In {ratio_elf}% games you have T1 elf - so potential to up to {ratio_elf}% of wins in t2 :p
                Plans have been thwarted by manascrew {self.manascrew} times ({ratio_manascrew }%) 
                and {self.pumpscrew} by pumps shortage ({ratio_pumpscrew}%)"""
    


def Get_Deck(file):
    #Getting the list from the txt file generated by goldfish.
    df = open(file).read().splitlines()
    deck = []
    for line in df:
        # Goldfish add sidebord after an empty line. As we do not want sideboard the for loop breaks after empty line.
        if line != "":
            for i in range(0,int(line[0])):
                deck.append(line[2:])
        else:
            break
    #Saving is as a list to pass it to convertet
    return(deck)

def Get_Hand(deck, cards):
    hand = random.choices(deck, k=cards)
    return(hand)

def Game_setup(hand, game):
    #Itterating through hand to get the game stat
    for cards in hand:
        game = converter.Converter(cards, game) #Using external converter to update the state of the game.

    return(game)

# Resetting game
def Game_reset(game):
    game.elf = False
    game.dmg_1 = 0
    game.dmg_2 = 0
    game.dmg_2_free = 0
    game.dmg_2_Groundswell = 0
    game.dmg_3 = 0
    game.dmg_4 = 0
    game.scale_up = False
    game.assault_strobe = False
    game.doublestrike = False
    game.t2_damage = 0 
    game.hex = 0
    game.g_mana = 0
    game.u_mana = 0
    game.r_mana = 0
    game.total_mana = 0
    

    return(game)

def Start_test(test=Test()):
    test.deck = Get_Deck("Deck.txt")
    test.games=0
    test.win=0
    test.elfs=0
    test.poison = []
    test.manascrew = 0
    test.pumpscrew = 0

    return(test)

def Game_go(test, i, handsize):
    Current_game = Game()
    for a in range(i):
        test.games += 1
        Current_game = Game_reset(Current_game)
        Hand = Get_Hand(test.deck, handsize)
        Current_game = Game_setup(Hand,Current_game)

        Current_game.t2_damage = converter.Get_Damage(Current_game)
        if Current_game.doublestrike == True:
            Current_game.t2_damage *= 2

        if Current_game.elf == True:
            test.elfs += 1
            if Current_game.t2_damage >= 10:
                test.win += 1
            else:
                if Current_game.total_mana < 2:
                    test.manascrew += 1
                else:
                    test.pumpscrew += 1
        
        test.poison.append(Current_game.t2_damage)       
    print("done")
    return(test)

# Creating a new test with 10 repetitions. I will creaete some more fancy GUI in few days (hopefully xD)
Test1 = Test()
Test1 = Start_test(Test1)

Test1 = Game_go(Test1,i = 10000, handsize = 7) # Test object, number of itterations, handsize

# Printing the results of the test. 
print(Test1)

pd.Series(Test1.poison).value_counts().sort_index().plot(kind='bar')
plt.show()



